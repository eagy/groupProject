package mainGame;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;


import cards.Card;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;

import players.Hand;

/**
 * This class establishes the main attributes of the frame and all of its 
 * contents. It also adds the funcionality of the game with the buttons hit, 
 * stand, play again, and deal. 
 * 
 * @author Daniel Eagy
 * @version 1.0
 *
 */
public class Table extends javax.swing.JFrame {
	private static final long serialVersionUID = 1L;
	private JPanel buttonPanel = new JPanel();
	private JPanel board = new JPanel();
	private JPanel playerPanel = new JPanel();
	private JPanel dealerPanel = new JPanel();

	private JTextField gameResult = new JTextField();

	private JButton deal = new JButton("Deal");
	private JButton hit = new JButton("Hit");
	private JButton stand = new JButton("Stand");
	private JButton playAgain = new JButton("Play Again");
	private JButton doubleDown = new JButton("Double Down");
	private JButton split = new JButton("Split");

	private JLabel playerLabel = new JLabel();
	private JLabel dealerLabel = new JLabel();

	private Hand dealer = new Hand();
	private Hand player = new Hand();
	//private Hand splitHand;
	private Blackjack game = new Blackjack(dealer, player);

	private JLabel dHiddenCard;
	private JLabel dCard1;
	private JLabel dCard2;
	private JLabel dHitCard;

	private JLabel pCard1;
	private JLabel pCard2;
	private JLabel pHitCard;



   /**
    * Creates new form playBoard
    */
   public Table() {
       initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   
   // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
   private void initComponents() {

       board = new javax.swing.JPanel();
       dealerPanel = new javax.swing.JPanel();
       playerPanel = new javax.swing.JPanel();
       pCard1 = new javax.swing.JLabel();
       pCard2 = new javax.swing.JLabel();
       pHitCard = new javax.swing.JLabel();
       buttonPanel = new javax.swing.JPanel();
       deal = new javax.swing.JButton();
       hit = new javax.swing.JButton();
       stand = new javax.swing.JButton();
       playAgain = new javax.swing.JButton();

       setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
       setTitle("Blackjack");
       setAutoRequestFocus(false);
       setBackground(new java.awt.Color(39, 119, 20));
       setPreferredSize(new java.awt.Dimension(800, 600));
       setResizable(false);

       board.setBackground(new java.awt.Color(39, 119, 20));
       board.setPreferredSize(new java.awt.Dimension(700, 600));

       dealerPanel.setBackground(new java.awt.Color(39, 119, 20));
       dealerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(39, 119, 20)));
       dealerPanel.setPreferredSize(new java.awt.Dimension(800, 200));

       playerPanel.setBackground(new java.awt.Color(39, 119, 20));
       playerPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(39, 119, 20)));
       playerPanel.setPreferredSize(new java.awt.Dimension(800, 200));
       playerPanel.add(pCard1);
       playerPanel.add(pCard2);
       playerPanel.add(pHitCard);

       javax.swing.GroupLayout boardLayout = new javax.swing.GroupLayout(board);
       board.setLayout(boardLayout);
       boardLayout.setHorizontalGroup(
           boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addComponent(dealerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
           .addComponent(playerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
       );
       boardLayout.setVerticalGroup(
           boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(boardLayout.createSequentialGroup()
               .addComponent(dealerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
               .addComponent(playerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addContainerGap())
       );
       
       buttonPanel.setLayout(new GridLayout());
       
       deal.setText("Deal");
       buttonPanel.add(deal);
       deal.addActionListener(new deal());
       
       playAgain.setText("Play Again");
       buttonPanel.add(playAgain);
       playAgain.addActionListener(new playAgain());
       playAgain.setEnabled(false);

       hit.setText("Hit");
       buttonPanel.add(hit);
       hit.addActionListener(new hit());
       hit.setEnabled(false);
       
       buttonPanel.add(doubleDown);
       doubleDown.addActionListener(new doubleDown());
       doubleDown.setEnabled(false);
       
       /*
       buttonPanel.add(split);
       split.addActionListener(new split());
       split.setEnabled(false);
       */
       
       stand.setText("Stand");
       buttonPanel.add(stand);
       stand.addActionListener(new stand());
       stand.setEnabled(false);
       
       buttonPanel.add(gameResult);
       gameResult.setEditable(false);
       gameResult.setFont(new Font("Arial Black", 1, 12));
       gameResult.setText("");
       gameResult.setHorizontalAlignment(JTextField.CENTER);
       
       javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
       getContentPane().setLayout(layout);
       layout.setHorizontalGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(layout.createSequentialGroup()
               .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGap(0, 0, Short.MAX_VALUE))
           .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
       );
       layout.setVerticalGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(layout.createSequentialGroup()
               .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
       );

       pack();
       setLocationRelativeTo(null);
   }
   
   class deal implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			playerPanel.add(playerLabel);
			dealerPanel.add(dealerLabel);

			dHiddenCard = new JLabel(new ImageIcon(getClass().getResource("/cardpics/BACK.png")));

			game.deal();

			Iterator<Card> iterator = dealer.iterator();
			Card dealerShowCard = null;
			int i = 0;

			while (iterator.hasNext()) {
				dealerShowCard = iterator.next();
				if (i == 0)
					dCard1 = new JLabel(dealerShowCard.getCardPic());
				else
					dCard2 = new JLabel(dealerShowCard.getCardPic());
				i++;
			}

			iterator = player.iterator();
			i = 0;

			while (iterator.hasNext()) {
				Card card = iterator.next();
				if (i == 0)
					pCard1 = new JLabel(card.getCardPic());
				else
					pCard2 = new JLabel(card.getCardPic());
				i++;
			}

			dealerPanel.add(dCard2);
			dealerPanel.add(dHiddenCard);


			playerPanel.add(pCard1);
			playerPanel.add(pCard2);

			dealerLabel.setText("Dealer: " + dealerShowCard.getFaceValue().getFaceValue());
			playerLabel.setText("Player: " + player.getHandTotal());

			if (game.blackjack()) {
				deal.setEnabled(false);
				hit.setEnabled(false);
				stand.setEnabled(false);
				playAgain.setEnabled(true);

				gameResult.setText("BLACKJACK");
			} else {
				deal.setEnabled(false);
				hit.setEnabled(true);
				stand.setEnabled(true);
				doubleDown.setEnabled(true);
				if(player.splittable())
					split.setEnabled(true);
			}

			add(dealerPanel, BorderLayout.NORTH);
			add(playerPanel, BorderLayout.CENTER);

		}
	}

	class hit implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			pHitCard = new JLabel(game.hit(player).getCardPic());
			playerPanel.add(pHitCard);
			playerPanel.repaint();

			if (game.bust(player)) {
				deal.setEnabled(false);
				hit.setEnabled(false);
				stand.setEnabled(false);
				doubleDown.setEnabled(false);
				playAgain.setEnabled(true);

				gameResult.setText(game.gameResult());
			}

			playerLabel.setText("Player: " + player.getHandTotal());

		}
	}
	
	class doubleDown implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			doubleDown.setEnabled(false);
			
			new hit().actionPerformed(e);
			new stand().actionPerformed(e);
		}
		
	}
	
	/*
	class split implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			splitHand = game.split(player);
			
			playerLabel.setText("Hand 1: " + player.getHandTotal());
			add(new JLabel("Hand 2: " + splitHand.getHandTotal()));
			playerPanel.repaint();
			
		}
	}
	*/
	class stand implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			dealerPanel.remove(dHiddenCard);
			dealerPanel.add(dCard1);

			while (dealer.getHandTotal() < 17 || (dealer.softHand()) && dealer.getHandTotal() >= 17) {
				dHitCard = new JLabel(game.hit(dealer).getCardPic());
				dealerPanel.add(dHitCard);
				dealerPanel.repaint();
			}

			deal.setEnabled(false);
			hit.setEnabled(false);
			stand.setEnabled(false);
			doubleDown.setEnabled(false);
			playAgain.setEnabled(true);

			gameResult.setText(game.gameResult());

			dealerLabel.setText("Dealer: " + dealer.getHandTotal());
		}
	}

	class playAgain implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			player = new Hand();
			dealer = new Hand();
			game = new Blackjack(dealer, player);

			playerLabel.setText("Player: ");
			dealerLabel.setText("Dealer: ");
			gameResult.setText(" ");
			
			playerPanel.removeAll();
			playerPanel.repaint();
			
			dealerPanel.removeAll();
			dealerPanel.repaint();

			hit.setEnabled(false);
			stand.setEnabled(false);
			playAgain.setEnabled(false);
			doubleDown.setEnabled(false);
			deal.setEnabled(true);
		}
	}
}// </editor-fold>     